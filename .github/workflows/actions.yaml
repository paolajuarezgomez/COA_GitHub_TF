name: GitHub Actions Terraform

on:
  push:
   # branches:
   #   - main
  pull_request:
   branches:
      - main
    
jobs:
 terraform:
    name: 'Deploy infrastructure'       
    env:
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      TF_VAR_fingerprint:  ${{ secrets.API_FINGERPRINT }}
      TF_VAR_user_ocid:  ${{ secrets.USER_ID }}
      TF_VAR_region: ${{ secrets.REGION}}
      TF_ACTION_WORKSPACE: "default"
      AWS_ACCESS_KEY_ID: ${{ secrets.ACCES_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY}}

            
    #runs-on: [self-hosted, pjuarez]
    runs-on: ubuntu-latest
    
    steps:
    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.name }} server hosted by GitHub!"
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    
    # Checkout the repository to the GitHub Actions runner
    - name: Check out repository code
      uses: actions/checkout@v2
    
    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    - run: echo  "The workflow is now ready to test your code on the runner."
    - name: List files in the repository
      run: |
         ls ${{ github.workspace }}
          
        
    # Configure S3 backend
    - name: Configure S3 backend
      run: | 
        echo  "[default]" > cred_store
        echo "aws_access_key_id= ${{ secrets.access_key_id}}" >> cred_store
        echo "aws_secret_access_key= ${{ secrets.secret_access_key}}" >> cred_store
        cat cred_store
        echo ${{ secrets.secret_access_key}}
        echo ${{ secrets.REGION}}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1.3.2
      #with:
      #  terraform_wrapper: false
        
    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
    #- run: echo ${{ steps.plan.outputs.stdout }}
    #- run: echo ${{ steps.plan.outputs.stderr }}
    #- run: echo ${{ steps.plan.outputs.exitcode }}


    - name: Terraform apply
      id: apply 
      run: terraform apply -auto-approve
      
      
      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
      
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
      
          </details>
      
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
  
    
    
